package com.ddaeany0919.insightdeal

import androidx.compose.animation.*
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalSoftwareKeyboardController
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AdvancedSearchScreen(
    onDealClick: (DealItem) -> Unit,
    onBackClick: () -> Unit,
    viewModel: AdvancedSearchViewModel = viewModel()
) {
    val searchQuery by viewModel.searchQuery.collectAsState()
    val searchResults by viewModel.searchResults.collectAsState()
    val searchSuggestions by viewModel.searchSuggestions.collectAsState()
    val activeFilters by viewModel.activeFilters.collectAsState()
    val popularKeywords by viewModel.popularKeywords.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    
    var showFilters by remember { mutableStateOf(false) }
    val focusRequester = remember { FocusRequester() }
    val keyboardController = LocalSoftwareKeyboardController.current
    
    LaunchedEffect(Unit) {
        viewModel.loadPopularKeywords()
        focusRequester.requestFocus()
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Ïä§ÎßàÌä∏ Í≤ÄÏÉâ",
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞")
                    }
                },
                actions = {
                    IconButton(
                        onClick = { showFilters = !showFilters }
                    ) {
                        Badge(
                            modifier = if (activeFilters.isNotEmpty()) Modifier else Modifier.size(0.dp)
                        ) {
                            Text("${activeFilters.size}")
                        }
                        Icon(
                            Icons.Default.FilterList,
                            contentDescription = "ÌïÑÌÑ∞",
                            tint = if (showFilters) MaterialTheme.colorScheme.primary 
                                  else MaterialTheme.colorScheme.onSurface
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // üîç Í≤ÄÏÉâ ÏûÖÎ†• ÏòÅÏó≠
            SearchInputSection(
                searchQuery = searchQuery,
                onQueryChange = viewModel::onSearchQueryChanged,
                suggestions = searchSuggestions,
                onSuggestionClick = viewModel::selectSuggestion,
                onSearch = {
                    viewModel.performSearch()
                    keyboardController?.hide()
                },
                focusRequester = focusRequester
            )
            
            // üéØ ÌïÑÌÑ∞ ÏòÅÏó≠ (Ï†ëÏùÑ Ïàò ÏûàÏùå)
            AnimatedVisibility(
                visible = showFilters,
                enter = slideInVertically() + expandVertically(),
                exit = slideOutVertically() + shrinkVertically()
            ) {
                FilterSection(
                    activeFilters = activeFilters,
                    onFilterToggle = viewModel::toggleFilter,
                    onClearFilters = viewModel::clearAllFilters
                )
            }
            
            // üî• Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥ (Í≤ÄÏÉâÏñ¥ ÏóÜÏùÑ ÎïåÎßå ÌëúÏãú)
            if (searchQuery.isEmpty() && searchResults.isEmpty()) {
                PopularKeywordsSection(
                    keywords = popularKeywords,
                    onKeywordClick = viewModel::selectSuggestion
                )
            }
            
            // üì± Í≤ÄÏÉâ Í≤∞Í≥º ÏòÅÏó≠
            when {
                isLoading -> {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            CircularProgressIndicator(
                                color = MaterialTheme.colorScheme.primary
                            )
                            
                            Spacer(modifier = Modifier.height(16.dp))
                            
                            Text(
                                text = "üîç Í≤ÄÏÉâ Ï§ë...",
                                fontSize = 16.sp,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }
                }
                
                searchResults.isEmpty() && searchQuery.isNotEmpty() -> {
                    SearchEmptyState(searchQuery)
                }
                
                else -> {
                    SearchResultsList(
                        results = searchResults,
                        onDealClick = onDealClick,
                        query = searchQuery
                    )
                }
            }
        }
    }
}

@Composable
private fun SearchInputSection(
    searchQuery: String,
    onQueryChange: (String) -> Unit,
    suggestions: List<String>,
    onSuggestionClick: (String) -> Unit,
    onSearch: () -> Unit,
    focusRequester: FocusRequester
) {
    Column(
        modifier = Modifier.padding(16.dp)
    ) {
        OutlinedTextField(
            value = searchQuery,
            onValueChange = onQueryChange,
            modifier = Modifier
                .fillMaxWidth()
                .focusRequester(focusRequester),
            placeholder = {
                Text(
                    text = "üîç ÏÉÅÌíàÎ™Ö, Î∏åÎûúÎìú, Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤ÄÏÉâ...",
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            },
            leadingIcon = {
                Icon(
                    Icons.Default.Search,
                    contentDescription = "Í≤ÄÏÉâ",
                    tint = MaterialTheme.colorScheme.primary
                )
            },
            trailingIcon = {
                if (searchQuery.isNotEmpty()) {
                    IconButton(onClick = { onQueryChange("") }) {
                        Icon(
                            Icons.Default.Clear,
                            contentDescription = "ÏßÄÏö∞Í∏∞"
                        )
                    }
                }
            },
            keyboardOptions = KeyboardOptions(
                imeAction = ImeAction.Search
            ),
            keyboardActions = KeyboardActions(
                onSearch = { onSearch() }
            ),
            singleLine = true,
            shape = RoundedCornerShape(12.dp)
        )
        
        // üí° Í≤ÄÏÉâ ÏûêÎèôÏôÑÏÑ± (ÎìúÎ°≠Îã§Ïö¥)
        AnimatedVisibility(
            visible = suggestions.isNotEmpty() && searchQuery.isNotEmpty(),
            enter = fadeIn() + expandVertically(),
            exit = fadeOut() + shrinkVertically()
        ) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 4.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
            ) {
                LazyColumn(
                    modifier = Modifier.heightIn(max = 200.dp)
                ) {
                    items(suggestions.take(5)) { suggestion ->
                        SuggestionItem(
                            suggestion = suggestion,
                            query = searchQuery,
                            onClick = { onSuggestionClick(suggestion) }
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun SuggestionItem(
    suggestion: String,
    query: String,
    onClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            Icons.Default.Search,
            contentDescription = null,
            modifier = Modifier.size(18.dp),
            tint = MaterialTheme.colorScheme.onSurfaceVariant
        )
        
        Spacer(modifier = Modifier.width(12.dp))
        
        // Í≤ÄÏÉâÏñ¥ ÌïòÏù¥ÎùºÏù¥ÌåÖ
        Text(
            text = suggestion,
            fontSize = 14.sp,
            modifier = Modifier.weight(1f)
        )
        
        Icon(
            Icons.Default.NorthWest,
            contentDescription = null,
            modifier = Modifier.size(16.dp),
            tint = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}

@Composable
private fun FilterSection(
    activeFilters: Map<String, Set<String>>,
    onFilterToggle: (String, String) -> Unit,
    onClearFilters: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "üéØ ÏÉÅÏÑ∏ ÌïÑÌÑ∞",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )
                
                if (activeFilters.values.any { it.isNotEmpty() }) {
                    TextButton(onClick = onClearFilters) {
                        Text("Ï†ÑÏ≤¥ Ìï¥Ï†ú")
                    }
                }
            }
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Í∞ÄÍ≤©ÎåÄ ÌïÑÌÑ∞
            FilterGroup(
                title = "üí∞ Í∞ÄÍ≤©ÎåÄ",
                options = listOf("5ÎßåÏõê Ïù¥Ìïò", "5-15ÎßåÏõê", "15-50ÎßåÏõê", "50-100ÎßåÏõê", "100ÎßåÏõê Ïù¥ÏÉÅ"),
                selectedOptions = activeFilters["price"] ?: emptySet(),
                onToggle = { option -> onFilterToggle("price", option) }
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Ìï†Ïù∏Ïú® ÌïÑÌÑ∞  
            FilterGroup(
                title = "üî• Ìï†Ïù∏Ïú®",
                options = listOf("30% Ïù¥ÏÉÅ", "50% Ïù¥ÏÉÅ", "70% Ïù¥ÏÉÅ"),
                selectedOptions = activeFilters["discount"] ?: emptySet(),
                onToggle = { option -> onFilterToggle("discount", option) }
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞
            FilterGroup(
                title = "üì± Ïπ¥ÌÖåÍ≥†Î¶¨",
                options = listOf("IT", "Ìå®ÏÖò", "ÏÉùÌôú", "ÏãùÌíà", "Ìï¥Ïô∏ÏßÅÍµ¨", "Ïä§Ìè¨Ï∏†"),
                selectedOptions = activeFilters["category"] ?: emptySet(),
                onToggle = { option -> onFilterToggle("category", option) }
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // ÏÇ¨Ïù¥Ìä∏ ÌïÑÌÑ∞ (Ïö∞ÏÑ†ÏàúÏúÑ Î∞òÏòÅ)
            FilterGroup(
                title = "üåê Ïª§ÎÆ§ÎãàÌã∞",
                options = listOf("ÎΩêÎøå", "ÏóêÌé®ÏΩîÎ¶¨ÏïÑ", "Îπ†ÏÇ≠", "Î£®Î¶¨Ïõπ", "ÌÅ¥Î¶¨Ïïô", "ÌÄòÏù¥ÏÇ¨Ï°¥"),
                selectedOptions = activeFilters["site"] ?: emptySet(),
                onToggle = { option -> onFilterToggle("site", option) }
            )
        }
    }
}

@Composable
private fun FilterGroup(
    title: String,
    options: List<String>,
    selectedOptions: Set<String>,
    onToggle: (String) -> Unit
) {
    Column {
        Text(
            text = title,
            fontSize = 14.sp,
            fontWeight = FontWeight.Medium,
            modifier = Modifier.padding(bottom = 8.dp)
        )
        
        LazyRow(
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(options) { option ->
                FilterChip(
                    onClick = { onToggle(option) },
                    label = { Text(option) },
                    selected = option in selectedOptions,
                    colors = FilterChipDefaults.filterChipColors(
                        selectedContainerColor = MaterialTheme.colorScheme.primary,
                        selectedLabelColor = MaterialTheme.colorScheme.onPrimary
                    )
                )
            }
        }
    }
}

@Composable
private fun PopularKeywordsSection(
    keywords: List<String>,
    onKeywordClick: (String) -> Unit
) {
    Column(
        modifier = Modifier.padding(16.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(bottom = 12.dp)
        ) {
            Icon(
                Icons.Default.TrendingUp,
                contentDescription = null,
                modifier = Modifier.size(20.dp),
                tint = MaterialTheme.colorScheme.primary
            )
            
            Spacer(modifier = Modifier.width(8.dp))
            
            Text(
                text = "üî• Ïã§ÏãúÍ∞Ñ Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold
            )
        }
        
        LazyRow(
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(keywords.take(10)) { keyword ->
                AssistChip(
                    onClick = { onKeywordClick(keyword) },
                    label = { Text(keyword) },
                    leadingIcon = {
                        Icon(
                            Icons.Default.Search,
                            contentDescription = null,
                            modifier = Modifier.size(16.dp)
                        )
                    }
                )
            }
        }
    }
}

@Composable
private fun SearchResultsList(
    results: List<DealItem>,
    onDealClick: (DealItem) -> Unit,
    query: String
) {
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.spacedBy(8.dp),
        contentPadding = PaddingValues(16.dp)
    ) {
        item {
            // Í≤ÄÏÉâ Í≤∞Í≥º ÌÜµÍ≥Ñ
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "üîç Í≤ÄÏÉâ Í≤∞Í≥º ${results.size}Í∞ú",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium
                )
                
                // Ï†ïÎ†¨ ÏòµÏÖò
                var showSortMenu by remember { mutableStateOf(false) }
                
                TextButton(
                    onClick = { showSortMenu = true }
                ) {
                    Text("Ï†ïÎ†¨")
                    Icon(
                        Icons.Default.ArrowDropDown,
                        contentDescription = null,
                        modifier = Modifier.size(16.dp)
                    )
                }
                
                DropdownMenu(
                    expanded = showSortMenu,
                    onDismissRequest = { showSortMenu = false }
                ) {
                    DropdownMenuItem(
                        text = { Text("ÏµúÏã†Ïàú") },
                        onClick = { 
                            // viewModel.setSortOrder(SortOrder.LATEST)
                            showSortMenu = false 
                        }
                    )
                    DropdownMenuItem(
                        text = { Text("Ïù∏Í∏∞Ïàú") },
                        onClick = { 
                            // viewModel.setSortOrder(SortOrder.POPULAR)
                            showSortMenu = false 
                        }
                    )
                    DropdownMenuItem(
                        text = { Text("Ìï†Ïù∏Ïú®Ïàú") },
                        onClick = { 
                            // viewModel.setSortOrder(SortOrder.DISCOUNT)
                            showSortMenu = false 
                        }
                    )
                }
            }
        }
        
        items(results) { deal ->
            SearchResultItem(
                deal = deal,
                onClick = { onDealClick(deal) },
                query = query
            )
        }
    }
}

@Composable
private fun SearchResultItem(
    deal: DealItem,
    onClick: () -> Unit,
    query: String
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() },
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ
            AsyncImage(
                model = deal.imageUrl,
                contentDescription = deal.title,
                modifier = Modifier
                    .size(60.dp)
                    .clip(RoundedCornerShape(8.dp))
                    .background(MaterialTheme.colorScheme.surfaceVariant)
            )
            
            Spacer(modifier = Modifier.width(12.dp))
            
            // ÏÉÅÌíà Ï†ïÎ≥¥
            Column(
                modifier = Modifier.weight(1f)
            ) {
                // ÏÇ¨Ïù¥Ìä∏Î™Ö + ÍøÄÎîú ÏßÄÏàò
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "[${deal.siteName}]",
                        fontSize = 12.sp,
                        color = MaterialTheme.colorScheme.primary,
                        fontWeight = FontWeight.Medium
                    )
                    
                    InlineScoreBadge(score = 85) // Ïã§Ï†úÎ°úÎäî deal.qualityScore
                }
                
                Spacer(modifier = Modifier.height(4.dp))
                
                // ÏÉÅÌíàÎ™Ö (ÌÇ§ÏõåÎìú ÌïòÏù¥ÎùºÏù¥ÌåÖ)
                Text(
                    text = deal.title,
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium,
                    maxLines = 2
                )
                
                Spacer(modifier = Modifier.height(4.dp))
                
                // Í∞ÄÍ≤© Ï†ïÎ≥¥
                deal.price?.let { price ->
                    Text(
                        text = "${NumberFormat.getInstance().format(price)}Ïõê",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
                
                // Ìï†Ïù∏Ïú® (ÏûàÎäî Í≤ΩÏö∞)
                deal.discountRate?.let { discount ->
                    Text(
                        text = "${discount}% Ìï†Ïù∏",
                        fontSize = 12.sp,
                        color = Color.Red,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
        }
    }
}

@Composable
private fun SearchEmptyState(query: String) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            Icons.Default.SearchOff,
            contentDescription = null,
            modifier = Modifier.size(64.dp),
            tint = MaterialTheme.colorScheme.onSurfaceVariant
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Text(
            text = "Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§",
            fontSize = 18.sp,
            fontWeight = FontWeight.Medium,
            textAlign = TextAlign.Center
        )
        
        Text(
            text = "\"$query\"Ïóê ÎåÄÌïú Ìï´ÎîúÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏñ¥Ïöî",
            fontSize = 14.sp,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(top = 8.dp)
        )
        
        Spacer(modifier = Modifier.height(24.dp))
        
        Text(
            text = "üí° Í≤ÄÏÉâ ÌåÅ:\n‚Ä¢ Îçî Í∞ÑÎã®Ìïú ÌÇ§ÏõåÎìúÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî\n‚Ä¢ Î∏åÎûúÎìúÎ™ÖÏù¥ÎÇò Ïπ¥ÌÖåÍ≥†Î¶¨Î°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî\n‚Ä¢ ÌïÑÌÑ∞Î•º Ï°∞Ï†ïÌï¥Î≥¥ÏÑ∏Ïöî",
            fontSize = 14.sp,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            textAlign = TextAlign.Center,
            lineHeight = 20.sp
        )
    }
}