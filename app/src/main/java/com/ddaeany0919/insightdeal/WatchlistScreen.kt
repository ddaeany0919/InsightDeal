package com.ddaeany0919.insightdeal

import androidx.compose.animation.*
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import coil.compose.AsyncImage
import java.text.DecimalFormat

/**
 * üìã ÏúÑÏãúÎ¶¨Ïä§Ìä∏ ÌôîÎ©¥ - "ÎÇ¥Í∞Ä Ï∂îÏ†ÅÌïòÎäî ÏÉÅÌíàÎì§"
 * 
 * ÏÇ¨Ïö©Ïûê Ï§ëÏã¨ ÏÑ§Í≥Ñ:
 * - Ìè¥ÏÑºÌä∏ Ïä§ÌÉÄÏùº: ÎßÅÌÅ¨ Î∂ôÏó¨ÎÑ£Í∏∞Î°ú ÏÉÅÌíà Ï∂îÍ∞Ä
 * - Í∞ÄÍ≤© ÌûàÏä§ÌÜ†Î¶¨: 30Ïùº Î≥ÄÎèô Í∑∏ÎûòÌîÑ
 * - Î™©ÌëúÍ∞Ä ÏïåÎ¶º: ÏõêÌïòÎäî Í∞ÄÍ≤© ÎèÑÎã¨ Ïãú Ìë∏Ïãú
 * - Ïä§ÎßàÌä∏ Îß§Ïπ≠: Ïª§ÎÆ§ÎãàÌã∞ ÎîúÍ≥º ÏûêÎèô Ïó∞Í≤∞
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun WatchlistScreen(
    navController: NavController,
    modifier: Modifier = Modifier
) {
    var showAddDialog by remember { mutableStateOf(false) }
    var selectedTab by remember { mutableStateOf(0) }
    
    // ÏûÑÏãú Îç∞Ïù¥ÌÑ∞
    val watchlistItems = remember {
        listOf(
            WatchlistItem(
                id = 1,
                title = "ÏÇºÏÑ± Í∞§Îü≠Ïãú Î≤ÑÏ¶à3 Pro ÎÖ∏Ïù¥Ï¶àÏ∫îÏä¨ÎßÅ",
                currentPrice = 198000,
                targetPrice = 180000,
                originalPrice = 350000,
                lastChecked = "10Î∂Ñ Ï†Ñ",
                priceHistory = listOf(220000, 210000, 205000, 198000),
                imageUrl = "",
                productUrl = "https://coupang.com/...",
                isOnSale = false,
                dealFound = true // Ïª§ÎÆ§ÎãàÌã∞ÏóêÏÑú Îß§Ïπ≠ Î∞úÍ≤¨
            ),
            WatchlistItem(
                id = 2,
                title = "Ïï†Ìîå ÏóêÏñ¥Ìåü ÌîÑÎ°ú 2ÏÑ∏ÎåÄ USB-C",
                currentPrice = 329000,
                targetPrice = 290000,
                originalPrice = 359000,
                lastChecked = "1ÏãúÍ∞Ñ Ï†Ñ",
                priceHistory = listOf(359000, 345000, 335000, 329000),
                imageUrl = "",
                productUrl = "https://coupang.com/...",
                isOnSale = false,
                dealFound = false
            ),
            WatchlistItem(
                id = 3,
                title = "Îã§Ïù¥Ïä® V15 Î¨¥ÏÑ†Ï≤≠ÏÜåÍ∏∞",
                currentPrice = 649000,
                targetPrice = 600000,
                originalPrice = 890000,
                lastChecked = "30Î∂Ñ Ï†Ñ",
                priceHistory = listOf(719000, 689000, 669000, 649000),
                imageUrl = "",
                productUrl = "https://coupang.com/...",
                isOnSale = true, // Î™©ÌëúÍ∞Ä Îã¨ÏÑ±!
                dealFound = true
            )
        )
    }
    
    Column(
        modifier = modifier.fillMaxSize()
    ) {
        // üéØ ÏÉÅÎã® Ìó§Îçî
        WatchlistHeader(
            onAddClick = { showAddDialog = true },
            selectedTab = selectedTab,
            onTabChange = { selectedTab = it }
        )
        
        when (selectedTab) {
            0 -> {
                // üìã ÎÇ¥ Ï∂îÏ†Å Î™©Î°ù
                WatchlistContent(
                    items = watchlistItems,
                    onItemClick = { item ->
                        navController.navigate("product_detail/${item.id}")
                    },
                    onDeleteClick = { item ->
                        // TODO: ÏÇ≠Ï†ú Î°úÏßÅ
                    },
                    onTargetPriceEdit = { item, newPrice ->
                        // TODO: Î™©ÌëúÍ∞Ä ÏàòÏ†ï
                    }
                )
            }
            1 -> {
                // üéØ Îß§Ïπ≠Îêú ÎîúÎì§
                MatchedDealsContent(
                    items = watchlistItems.filter { it.dealFound },
                    onDealClick = { item ->
                        navController.navigate("deal_detail/${item.id}")
                    }
                )
            }
        }
    }
    
    // ‚ûï ÏÉÅÌíà Ï∂îÍ∞Ä Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (showAddDialog) {
        AddProductDialog(
            onDismiss = { showAddDialog = false },
            onAdd = { url, targetPrice ->
                // TODO: ÏÉÅÌíà Ï∂îÍ∞Ä Î°úÏßÅ
                showAddDialog = false
            }
        )
    }
}

/**
 * üéØ ÏúÑÏãúÎ¶¨Ïä§Ìä∏ Ìó§Îçî
 */
@Composable
private fun WatchlistHeader(
    onAddClick: () -> Unit,
    selectedTab: Int,
    onTabChange: (Int) -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(MaterialTheme.colorScheme.surface)
            .padding(16.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "üìã ÎÇ¥ ÏúÑÏãúÎ¶¨Ïä§Ìä∏",
                style = MaterialTheme.typography.headlineMedium,
                fontWeight = FontWeight.Bold
            )
            
            FloatingActionButton(
                onClick = onAddClick,
                modifier = Modifier.size(48.dp),
                containerColor = MaterialTheme.colorScheme.primary
            ) {
                Icon(
                    imageVector = Icons.Default.Add,
                    contentDescription = "ÏÉÅÌíà Ï∂îÍ∞Ä",
                    tint = MaterialTheme.colorScheme.onPrimary
                )
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // üìë ÌÉ≠
        TabRow(
            selectedTabIndex = selectedTab,
            containerColor = MaterialTheme.colorScheme.surface
        ) {
            Tab(
                selected = selectedTab == 0,
                onClick = { onTabChange(0) },
                text = { Text("Ï∂îÏ†Å Ï§ë") }
            )
            Tab(
                selected = selectedTab == 1,
                onClick = { onTabChange(1) },
                text = { 
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Text("Îß§Ïπ≠ Îîú")
                        Spacer(modifier = Modifier.width(4.dp))
                        Surface(
                            shape = RoundedCornerShape(8.dp),
                            color = Color(0xFFFF4444)
                        ) {
                            Text(
                                "2",
                                modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),
                                style = MaterialTheme.typography.labelSmall,
                                color = Color.White
                            )
                        }
                    }
                }
            )
        }
    }
}

/**
 * üìã ÏúÑÏãúÎ¶¨Ïä§Ìä∏ Î©îÏù∏ ÏΩòÌÖêÏ∏†
 */
@Composable
private fun WatchlistContent(
    items: List<WatchlistItem>,
    onItemClick: (WatchlistItem) -> Unit,
    onDeleteClick: (WatchlistItem) -> Unit,
    onTargetPriceEdit: (WatchlistItem, Int) -> Unit
) {
    if (items.isEmpty()) {
        // Îπà ÏÉÅÌÉú
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(32.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Icon(
                imageVector = Icons.Default.BookmarkBorder,
                contentDescription = null,
                modifier = Modifier.size(64.dp),
                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.3f)
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Text(
                text = "ÏïÑÏßÅ Ï∂îÏ†ÅÌïòÎäî ÏÉÅÌíàÏù¥ ÏóÜÏñ¥Ïöî",
                style = MaterialTheme.typography.titleMedium,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
            )
            
            Text(
                text = "Ïø†Ìå° ÏÉÅÌíà ÎßÅÌÅ¨Î•º Î∂ôÏó¨ÎÑ£Ïñ¥ÏÑú\nÍ∞ÄÍ≤© Î≥ÄÎèôÏùÑ Ï∂îÏ†ÅÌï¥Î≥¥ÏÑ∏Ïöî!",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),
                textAlign = androidx.compose.ui.text.style.TextAlign.Center
            )
        }
    } else {
        LazyColumn(
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            items(items, key = { it.id }) { item ->
                WatchlistItemCard(
                    item = item,
                    onClick = { onItemClick(item) },
                    onDeleteClick = { onDeleteClick(item) },
                    onTargetPriceEdit = { newPrice -> onTargetPriceEdit(item, newPrice) }
                )
            }
        }
    }
}

/**
 * üìã ÏúÑÏãúÎ¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú Ïπ¥Îìú
 */
@Composable
private fun WatchlistItemCard(
    item: WatchlistItem,
    onClick: () -> Unit,
    onDeleteClick: () -> Unit,
    onTargetPriceEdit: (Int) -> Unit
) {
    Card(
        onClick = onClick,
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = if (item.isOnSale) {
                Color(0xFF00C853).copy(alpha = 0.1f)
            } else {
                MaterialTheme.colorScheme.surface
            }
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.Top
            ) {
                // Ïù¥ÎØ∏ÏßÄ
                AsyncImage(
                    model = item.imageUrl.ifEmpty { "https://via.placeholder.com/80x80" },
                    contentDescription = null,
                    modifier = Modifier
                        .size(80.dp)
                        .clip(RoundedCornerShape(8.dp)),
                    contentScale = ContentScale.Crop
                )
                
                Spacer(modifier = Modifier.width(12.dp))
                
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    // üéØ ÏÉÅÌÉú ÌëúÏãú
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        if (item.isOnSale) {
                            Surface(
                                color = Color(0xFF00C853),
                                shape = RoundedCornerShape(4.dp)
                            ) {
                                Text(
                                    "üéØ Î™©ÌëúÍ∞Ä Îã¨ÏÑ±!",
                                    modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),
                                    style = MaterialTheme.typography.labelSmall,
                                    color = Color.White,
                                    fontWeight = FontWeight.Bold
                                )
                            }
                        } else if (item.dealFound) {
                            Surface(
                                color = Color(0xFFFF9800),
                                shape = RoundedCornerShape(4.dp)
                            ) {
                                Text(
                                    "üî• Ïª§ÎÆ§ÎãàÌã∞ Îîú Î∞úÍ≤¨!",
                                    modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),
                                    style = MaterialTheme.typography.labelSmall,
                                    color = Color.White,
                                    fontWeight = FontWeight.Bold
                                )
                            }
                        }
                        
                        Spacer(modifier = Modifier.weight(1f))
                        
                        IconButton(
                            onClick = onDeleteClick,
                            modifier = Modifier.size(24.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Delete,
                                contentDescription = "ÏÇ≠Ï†ú",
                                modifier = Modifier.size(16.dp),
                                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(4.dp))
                    
                    // Ï†úÎ™©
                    Text(
                        text = item.title,
                        style = MaterialTheme.typography.titleSmall,
                        fontWeight = FontWeight.Medium,
                        maxLines = 2,
                        overflow = TextOverflow.Ellipsis
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    // Í∞ÄÍ≤© Ï†ïÎ≥¥
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "ÌòÑÏû¨: ${formatPrice(item.currentPrice)}",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary
                        )
                        
                        Spacer(modifier = Modifier.width(8.dp))
                        
                        val priceChange = item.priceHistory.let { history ->
                            if (history.size >= 2) {
                                item.currentPrice - history[history.size - 2]
                            } else 0
                        }
                        
                        if (priceChange != 0) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    imageVector = if (priceChange < 0) Icons.Default.TrendingDown else Icons.Default.TrendingUp,
                                    contentDescription = null,
                                    modifier = Modifier.size(16.dp),
                                    tint = if (priceChange < 0) Color(0xFF00C853) else Color(0xFFFF4444)
                                )
                                
                                Text(
                                    text = "${if (priceChange > 0) "+" else ""}${formatPrice(priceChange)}",
                                    style = MaterialTheme.typography.labelMedium,
                                    color = if (priceChange < 0) Color(0xFF00C853) else Color(0xFFFF4444)
                                )
                            }
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(4.dp))
                    
                    // Î™©ÌëúÍ∞Ä
                    Text(
                        text = "Î™©Ìëú: ${formatPrice(item.targetPrice)}",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                    )
                    
                    Text(
                        text = "ÎßàÏßÄÎßâ ÌôïÏù∏: ${item.lastChecked}",
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // üìä Í∞ÑÎã®Ìïú Í∞ÄÍ≤© ÌûàÏä§ÌÜ†Î¶¨ (ÎØ∏Îãà Í∑∏ÎûòÌîÑ)
            PriceTrendIndicator(
                priceHistory = item.priceHistory,
                targetPrice = item.targetPrice
            )
        }
    }
}

/**
 * üéØ Îß§Ïπ≠Îêú Îîú ÏΩòÌÖêÏ∏†
 */
@Composable
private fun MatchedDealsContent(
    items: List<WatchlistItem>,
    onDealClick: (WatchlistItem) -> Unit
) {
    LazyColumn(
        contentPadding = PaddingValues(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        item {
            Text(
                text = "üéØ Ï∂îÏ†Å Ï§ëÏù∏ ÏÉÅÌíàÏù¥ Ïª§ÎÆ§ÎãàÌã∞Ïóê ÌäπÍ∞ÄÎ°ú Ïò¨ÎùºÏôîÏñ¥Ïöî!",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.primary
            )
            
            Spacer(modifier = Modifier.height(8.dp))
        }
        
        items(items, key = { it.id }) { item ->
            MatchedDealCard(
                item = item,
                onClick = { onDealClick(item) }
            )
        }
    }
}

/**
 * üî• Îß§Ïπ≠Îêú Îîú Ïπ¥Îìú
 */
@Composable
private fun MatchedDealCard(
    item: WatchlistItem,
    onClick: () -> Unit
) {
    Card(
        onClick = onClick,
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFFF9800).copy(alpha = 0.1f)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier.padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            AsyncImage(
                model = item.imageUrl.ifEmpty { "https://via.placeholder.com/60x60" },
                contentDescription = null,
                modifier = Modifier
                    .size(60.dp)
                    .clip(RoundedCornerShape(8.dp)),
                contentScale = ContentScale.Crop
            )
            
            Spacer(modifier = Modifier.width(12.dp))
            
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Surface(
                    color = Color(0xFFFF9800),
                    shape = RoundedCornerShape(4.dp)
                ) {
                    Text(
                        "üî• Ïª§ÎÆ§ÎãàÌã∞ ÌäπÍ∞Ä Î∞úÍ≤¨!",
                        modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),
                        style = MaterialTheme.typography.labelSmall,
                        color = Color.White,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                Spacer(modifier = Modifier.height(4.dp))
                
                Text(
                    text = item.title,
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Medium,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
                
                Text(
                    text = "Î™©ÌëúÍ∞Ä ${formatPrice(item.targetPrice)} vs Ïª§ÎÆ§ÎãàÌã∞ ${formatPrice(item.currentPrice - 20000)}",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                )
            }
            
            Icon(
                imageVector = Icons.Default.ChevronRight,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
            )
        }
    }
}

/**
 * ‚ûï ÏÉÅÌíà Ï∂îÍ∞Ä Îã§Ïù¥ÏñºÎ°úÍ∑∏
 */
@Composable
private fun AddProductDialog(
    onDismiss: () -> Unit,
    onAdd: (String, Int) -> Unit
) {
    var productUrl by remember { mutableStateOf("") }
    var targetPrice by remember { mutableStateOf("") }
    val clipboardManager = LocalClipboardManager.current
    
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text("‚ûï ÏÉÅÌíà Ï∂îÍ∞Ä")
        },
        text = {
            Column {
                Text(
                    "Ïø†Ìå°, 11Î≤àÍ∞Ä Îì±Ïùò ÏÉÅÌíà ÎßÅÌÅ¨Î•º Î∂ôÏó¨ÎÑ£Ïñ¥Ï£ºÏÑ∏Ïöî",
                    style = MaterialTheme.typography.bodyMedium
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                OutlinedTextField(
                    value = productUrl,
                    onValueChange = { productUrl = it },
                    label = { Text("ÏÉÅÌíà URL") },
                    placeholder = { Text("https://coupang.com/...") },
                    modifier = Modifier.fillMaxWidth(),
                    trailingIcon = {
                        IconButton(
                            onClick = {
                                clipboardManager.getText()?.let { text ->
                                    productUrl = text.toString()
                                }
                            }
                        ) {
                            Icon(Icons.Default.ContentPaste, "Î∂ôÏó¨ÎÑ£Í∏∞")
                        }
                    }
                )
                
                Spacer(modifier = Modifier.height(12.dp))
                
                OutlinedTextField(
                    value = targetPrice,
                    onValueChange = { targetPrice = it },
                    label = { Text("Î™©ÌëúÍ∞Ä (Ïõê)") },
                    placeholder = { Text("200000") },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        },
        confirmButton = {
            TextButton(
                onClick = {
                    if (productUrl.isNotEmpty() && targetPrice.isNotEmpty()) {
                        onAdd(productUrl, targetPrice.toIntOrNull() ?: 0)
                    }
                },
                enabled = productUrl.isNotEmpty() && targetPrice.isNotEmpty()
            ) {
                Text("Ï∂îÍ∞Ä")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("Ï∑®ÏÜå")
            }
        }
    )
}

/**
 * üìä Í∞ÄÍ≤© Ìä∏Î†åÎìú Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ (ÎØ∏Îãà Í∑∏ÎûòÌîÑ)
 */
@Composable
private fun PriceTrendIndicator(
    priceHistory: List<Int>,
    targetPrice: Int
) {
    if (priceHistory.isEmpty()) return
    
    val maxPrice = priceHistory.maxOrNull() ?: 0
    val minPrice = priceHistory.minOrNull() ?: 0
    val range = maxPrice - minPrice
    
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .height(24.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            "üìä",
            style = MaterialTheme.typography.labelSmall
        )
        
        Spacer(modifier = Modifier.width(8.dp))
        
        // Í∞ÑÎã®Ìïú ÎùºÏù∏ Ï∞®Ìä∏ Ìö®Í≥º
        Row(
            modifier = Modifier.weight(1f),
            horizontalArrangement = Arrangement.spacedBy(2.dp)
        ) {
            priceHistory.forEachIndexed { index, price ->
                val height = if (range > 0) {
                    ((price - minPrice).toFloat() / range * 16).dp + 4.dp
                } else {
                    8.dp
                }
                
                Surface(
                    modifier = Modifier
                        .width(8.dp)
                        .height(height),
                    color = if (price <= targetPrice) {
                        Color(0xFF00C853)
                    } else {
                        MaterialTheme.colorScheme.primary.copy(alpha = 0.7f)
                    },
                    shape = RoundedCornerShape(2.dp)
                ) {}
            }
        }
        
        Text(
            "30Ïùº",
            style = MaterialTheme.typography.labelSmall,
            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
        )
    }
}

/**
 * üí∞ Í∞ÄÍ≤© Ìè¨Îß∑ÌÑ∞
 */
private fun formatPrice(price: Int): String {
    val formatter = DecimalFormat("#,###")
    return "${formatter.format(price)}Ïõê"
}

/**
 * üì¶ ÏúÑÏãúÎ¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§
 */
data class WatchlistItem(
    val id: Int,
    val title: String,
    val currentPrice: Int,
    val targetPrice: Int,
    val originalPrice: Int,
    val lastChecked: String,
    val priceHistory: List<Int>,
    val imageUrl: String,
    val productUrl: String,
    val isOnSale: Boolean = false, // Î™©ÌëúÍ∞Ä Îã¨ÏÑ±
    val dealFound: Boolean = false // Ïª§ÎÆ§ÎãàÌã∞ Îîú Î∞úÍ≤¨
)