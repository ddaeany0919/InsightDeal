package com.yourpackage.insightdeal

import android.graphics.Color as AndroidColor
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.AsyncImage
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import com.github.mikephil.charting.formatter.ValueFormatter
import kotlinx.coroutines.launch
import java.text.DecimalFormat
import java.text.SimpleDateFormat
import java.util.*

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun PriceChartScreen(
    productId: Int,
    viewModel: PriceChartViewModel = viewModel(),
    onNavigateBack: () -> Unit = {}
) {
    val product by viewModel.product.collectAsState()
    val priceHistory by viewModel.priceHistory.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    
    val pagerState = rememberPagerState(pageCount = { 3 }) // 7Ïùº, 30Ïùº, Ï†ÑÏ≤¥
    val scope = rememberCoroutineScope()
    
    LaunchedEffect(productId) {
        viewModel.loadProductData(productId)
    }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        // üé® Ìè¥ÏÑºÌä∏ Ïä§ÌÉÄÏùº Ìó§Îçî
        Surface(
            modifier = Modifier.fillMaxWidth(),
            color = PrimaryOrange,
            shadowElevation = 4.dp
        ) {
            Row(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                IconButton(
                    onClick = onNavigateBack,
                    modifier = Modifier
                        .background(
                            Color.White.copy(alpha = 0.2f),
                            CircleShape
                        )
                        .size(40.dp)
                ) {
                    Icon(
                        Icons.Default.ArrowBack,
                        contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                        tint = Color.White
                    )
                }
                
                Spacer(modifier = Modifier.width(16.dp))
                
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "Í∞ÄÍ≤© Î∂ÑÏÑù",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                    if (product != null) {
                        Text(
                            text = product!!.title.take(30) + "...",
                            fontSize = 14.sp,
                            color = Color.White.copy(alpha = 0.8f),
                            maxLines = 1
                        )
                    }
                }
            }
        }
        
        if (isLoading) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator(color = PrimaryOrange)
            }
        } else if (product != null) {
            // üìà Î©îÏù∏ Ïª®ÌÖêÏ∏†
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(rememberScrollState())
            ) {
                // üì∏ ÏÉÅÌíà Ï†ïÎ≥¥ Ïπ¥Îìú
                ProductInfoCard(product = product!!)
                
                // üìâ Í∞ÄÍ≤© ÏöîÏïΩ Ïπ¥Îìú
                PriceSummaryCard(
                    product = product!!,
                    priceHistory = priceHistory
                )
                
                // üìä Í∏∞Í∞Ñ ÏÑ†ÌÉù ÌÉ≠
                PeriodTabs(
                    pagerState = pagerState,
                    onTabClick = { index ->
                        scope.launch {
                            pagerState.animateScrollToPage(index)
                        }
                    }
                )
                
                // üìà Í∞ÄÍ≤© Í∑∏ÎûòÌîÑ
                HorizontalPager(
                    state = pagerState,
                    modifier = Modifier.height(320.dp)
                ) { page ->
                    val periodData = when (page) {
                        0 -> priceHistory.takeLast(7) // 7Ïùº
                        1 -> priceHistory.takeLast(30) // 30Ïùº
                        2 -> priceHistory // Ï†ÑÏ≤¥
                        else -> priceHistory
                    }
                    
                    PriceChart(
                        priceData = periodData,
                        product = product!!
                    )
                }
                
                // üéØ Íµ¨Îß§ ÌÉÄÏù¥Î∞ç Í∞ÄÏù¥Îìú
                BuyingTimingCard(
                    product = product!!,
                    priceHistory = priceHistory
                )
                
                // üîî ÏïåÎ¶º ÏÑ§Ï†ï Ïπ¥Îìú
                AlertSettingsCard(
                    product = product!!,
                    onUpdateTargetPrice = { newPrice ->
                        viewModel.updateTargetPrice(newPrice)
                    }
                )
                
                Spacer(modifier = Modifier.height(100.dp))
            }
        }
    }
}

@Composable
fun ProductInfoCard(product: ProductData) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ
            AsyncImage(
                model = product.imageUrl,
                contentDescription = "ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ",
                modifier = Modifier
                    .size(100.dp)
                    .clip(RoundedCornerShape(12.dp))
                    .background(LightGray),
                contentScale = ContentScale.Crop
            )
            
            // ÏÉÅÌíà Ï†ïÎ≥¥
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = product.title,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = DarkGray,
                    maxLines = 2
                )
                
                if (product.brand.isNotEmpty()) {
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = product.brand,
                        fontSize = 14.sp,
                        color = Color.Gray
                    )
                }
                
                Spacer(modifier = Modifier.height(12.dp))
                
                // ÌòÑÏû¨ Í∞ÄÍ≤©
                Row(
                    verticalAlignment = Alignment.Baseline,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text(
                        text = "${product.currentPrice:,}Ïõê",
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold,
                        color = PrimaryOrange
                    )
                    
                    if (product.discountRate > 0) {
                        Text(
                            text = "${product.discountRate}% Ìï†Ïù∏",
                            fontSize = 14.sp,
                            color = Red,
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun PriceSummaryCard(
    product: ProductData,
    priceHistory: List<PriceHistoryData>
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp)
        ) {
            Text(
                text = "üí∞ Í∞ÄÍ≤© Î∂ÑÏÑù",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = DarkGray
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // 4Í∞ú Ïó¥ Í∑∏Î¶¨Îìú
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                PriceSummaryItem(
                    label = "ÌòÑÏû¨",
                    value = "${product.currentPrice:,}Ïõê",
                    color = PrimaryOrange,
                    modifier = Modifier.weight(1f)
                )
                
                PriceSummaryItem(
                    label = "ÏµúÏ†Ä",
                    value = "${product.lowestPrice:,}Ïõê",
                    color = Blue,
                    isHighlight = product.currentPrice == product.lowestPrice,
                    modifier = Modifier.weight(1f)
                )
                
                PriceSummaryItem(
                    label = "ÏµúÍ≥†",
                    value = "${product.highestPrice:,}Ïõê",
                    color = Red,
                    modifier = Modifier.weight(1f)
                )
                
                val averagePrice = if (priceHistory.isNotEmpty()) {
                    priceHistory.sumOf { it.price } / priceHistory.size
                } else product.currentPrice
                
                PriceSummaryItem(
                    label = "ÌèâÍ∑†",
                    value = "${averagePrice:,}Ïõê",
                    color = Color.Gray,
                    modifier = Modifier.weight(1f)
                )
            }
        }
    }
}

@Composable
fun PriceSummaryItem(
    label: String,
    value: String,
    color: Color,
    isHighlight: Boolean = false,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = label,
            fontSize = 13.sp,
            color = Color.Gray
        )
        Spacer(modifier = Modifier.height(4.dp))
        Text(
            text = value,
            fontSize = 16.sp,
            fontWeight = if (isHighlight) FontWeight.Bold else FontWeight.Medium,
            color = if (isHighlight) color else DarkGray,
            textAlign = TextAlign.Center
        )
        if (isHighlight) {
            Box(
                modifier = Modifier
                    .size(4.dp)
                    .background(color, CircleShape)
            )
        }
    }
}

@Composable
fun PeriodTabs(
    pagerState: androidx.compose.foundation.pager.PagerState,
    onTabClick: (Int) -> Unit
) {
    val tabTitles = listOf("7Ïùº", "30Ïùº", "Ï†ÑÏ≤¥")
    
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        horizontalArrangement = Arrangement.Center
    ) {
        tabTitles.forEachIndexed { index, title ->
            val isSelected = pagerState.currentPage == index
            
            Surface(
                modifier = Modifier
                    .clickable { onTabClick(index) }
                    .padding(horizontal = 4.dp),
                shape = RoundedCornerShape(20.dp),
                color = if (isSelected) PrimaryOrange else LightGray
            ) {
                Text(
                    text = title,
                    modifier = Modifier.padding(horizontal = 20.dp, vertical = 8.dp),
                    fontSize = 14.sp,
                    fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Medium,
                    color = if (isSelected) Color.White else Color.Gray
                )
            }
        }
    }
}

@Composable
fun PriceChart(
    priceData: List<PriceHistoryData>,
    product: ProductData
) {
    if (priceData.isEmpty()) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                Icon(
                    Icons.Default.ShowChart,
                    contentDescription = "Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå",
                    modifier = Modifier.size(48.dp),
                    tint = Color.Gray.copy(alpha = 0.5f)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞Î•º ÏàòÏßë Ï§ëÏûÖÎãàÎã§...",
                    color = Color.Gray,
                    fontSize = 16.sp
                )
            }
        }
        return
    }
    
    AndroidView(
        factory = { context ->
            LineChart(context).apply {
                setupChart(this, priceData, product)
            }
        },
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    )
}

private fun setupChart(
    chart: LineChart,
    priceData: List<PriceHistoryData>,
    product: ProductData
) {
    val entries = priceData.mapIndexed { index, data ->
        Entry(index.toFloat(), data.price.toFloat())
    }
    
    val dataSet = LineDataSet(entries, "Í∞ÄÍ≤©").apply {
        color = AndroidColor.parseColor("#FF6B35") // PrimaryOrange
        setCircleColor(AndroidColor.parseColor("#FF6B35"))
        lineWidth = 3f
        circleRadius = 4f
        setDrawFilled(true)
        fillColor = AndroidColor.parseColor("#FFE5DB")
        fillAlpha = 100
        setDrawValues(false)
        mode = LineDataSet.Mode.CUBIC_BEZIER // Î∂ÄÎìúÎü¨Ïö¥ Í≥°ÏÑ†
    }
    
    chart.apply {
        data = LineData(dataSet)
        description.isEnabled = false
        legend.isEnabled = false
        
        // XÏ∂ï ÏÑ§Ï†ï
        xAxis.apply {
            position = com.github.mikephil.charting.components.XAxis.XAxisPosition.BOTTOM
            setDrawGridLines(false)
            granularity = 1f
            textColor = AndroidColor.GRAY
        }
        
        // YÏ∂ï ÏÑ§Ï†ï
        axisLeft.apply {
            setDrawGridLines(true)
            gridColor = AndroidColor.LTGRAY
            textColor = AndroidColor.GRAY
            valueFormatter = object : ValueFormatter() {
                override fun getFormattedValue(value: Float): String {
                    return DecimalFormat("#,###").format(value.toInt()) + "Ïõê"
                }
            }
        }
        
        axisRight.isEnabled = false
        
        // Ïï†ÎãàÎ©îÏù¥ÏÖò
        animateX(1000)
        invalidate()
    }
}

@Composable
fun BuyingTimingCard(
    product: ProductData,
    priceHistory: List<PriceHistoryData>
) {
    val isGoodTiming = product.currentPrice <= product.targetPrice || 
                      product.currentPrice == product.lowestPrice
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = if (isGoodTiming) Green.copy(alpha = 0.1f) else Color.White
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Icon(
                    if (isGoodTiming) Icons.Default.TrendingDown else Icons.Default.TrendingUp,
                    contentDescription = "ÌÉÄÏù¥Î∞ç",
                    tint = if (isGoodTiming) Green else PrimaryOrange,
                    modifier = Modifier.size(28.dp)
                )
                
                Column {
                    Text(
                        text = if (isGoodTiming) "üéâ ÏßÄÍ∏àÏù¥ Íµ¨Îß§ ÌÉÄÏù¥Î∞ç!" else "ü§î Ï¢Ä Îçî Í∏∞Îã§Î†§Î≥ºÍπåÏöî?",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        color = if (isGoodTiming) Green else DarkGray
                    )
                    
                    Text(
                        text = if (isGoodTiming) "Î™©ÌëúÍ∞ÄÍ≤© ÎòêÎäî ÏµúÏ†ÄÍ∞ÄÏóê ÎèÑÎã¨ÌñàÏäµÎãàÎã§" else "Ï¢ãÏùÄ Í∞ÄÍ≤©ÏúºÎ°ú Îñ®Ïñ¥Ïßà ÎïåÍπåÏßÄ ÏïåÎ¶ºÏùÑ ÎìúÎ¶¥Í≤åÏöî",
                        fontSize = 14.sp,
                        color = Color.Gray
                    )
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AlertSettingsCard(
    product: ProductData,
    onUpdateTargetPrice: (Int) -> Unit
) {
    var showDialog by remember { mutableStateOf(false) }
    var targetPriceText by remember { mutableStateOf(product.targetPrice.toString()) }
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        text = "üîî ÏïåÎ¶º ÏÑ§Ï†ï",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        color = DarkGray
                    )
                    Text(
                        text = "Î™©Ìëú Í∞ÄÍ≤©: ${product.targetPrice:,}Ïõê",
                        fontSize = 14.sp,
                        color = Color.Gray
                    )
                }
                
                Button(
                    onClick = { showDialog = true },
                    colors = ButtonDefaults.buttonColors(containerColor = PrimaryOrange),
                    shape = RoundedCornerShape(20.dp)
                ) {
                    Text("ÏàòÏ†ï")
                }
            }
        }
    }
    
    // Î™©ÌëúÍ∞ÄÍ≤© ÏàòÏ†ï Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            confirmButton = {
                TextButton(
                    onClick = {
                        val newPrice = targetPriceText.toIntOrNull()
                        if (newPrice != null && newPrice > 0) {
                            onUpdateTargetPrice(newPrice)
                            showDialog = false
                        }
                    }
                ) {
                    Text("Ï†ÄÏû•", color = PrimaryOrange)
                }
            },
            dismissButton = {
                TextButton(onClick = { showDialog = false }) {
                    Text("Ï∑®ÏÜå")
                }
            },
            title = { Text("Î™©Ìëú Í∞ÄÍ≤© ÏÑ§Ï†ï") },
            text = {
                OutlinedTextField(
                    value = targetPriceText,
                    onValueChange = { targetPriceText = it.filter { char -> char.isDigit() } },
                    label = { Text("Î™©Ìëú Í∞ÄÍ≤©") },
                    trailingIcon = { Text("Ïõê") },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        )
    }
}

// Îç∞Ïù¥ÌÑ∞ Î™®Îç∏
data class PriceHistoryData(
    val price: Int,
    val date: String
)