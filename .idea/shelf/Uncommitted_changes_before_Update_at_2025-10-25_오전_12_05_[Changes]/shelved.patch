Index: app/src/main/java/com/ddaeany0919/insightdeal/AdvancedSearchScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ddaeany0919.insightdeal\r\n\r\nimport androidx.compose.animation.*\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.LazyRow\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.*\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.focus.focusRequester\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport coil.compose.AsyncImage\r\nimport java.text.NumberFormat\r\nimport com.ddaeany0919.insightdeal.models.DealItem\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun AdvancedSearchScreen(\r\n    onDealClick: (DealItem) -> Unit,\r\n    onBackClick: () -> Unit,\r\n    viewModel: AdvancedSearchViewModel = viewModel()\r\n) {\r\n    val searchQuery by viewModel.searchQuery.collectAsState()\r\n    val searchResults by viewModel.searchResults.collectAsState()\r\n    val searchSuggestions by viewModel.searchSuggestions.collectAsState()\r\n    val activeFilters by viewModel.activeFilters.collectAsState()\r\n    val popularKeywords by viewModel.popularKeywords.collectAsState()\r\n    val isLoading by viewModel.isLoading.collectAsState()\r\n    \r\n    var showFilters by remember { mutableStateOf(false) }\r\n    val focusRequester = remember { FocusRequester() }\r\n    val keyboardController = LocalSoftwareKeyboardController.current\r\n    \r\n    LaunchedEffect(Unit) {\r\n        viewModel.loadPopularKeywords()\r\n        focusRequester.requestFocus()\r\n    }\r\n    \r\n    Scaffold(\r\n        topBar = {\r\n            TopAppBar(\r\n                title = {\r\n                    Text(\r\n                        text = \"스마트 검색\",\r\n                        fontWeight = FontWeight.Bold\r\n                    )\r\n                },\r\n                navigationIcon = {\r\n                    IconButton(onClick = onBackClick) {\r\n                        Icon(Icons.Default.ArrowBack, contentDescription = \"뒤로가기\")\r\n                    }\r\n                },\r\n                actions = {\r\n                    IconButton(\r\n                        onClick = { showFilters = !showFilters }\r\n                    ) {\r\n                        Badge(\r\n                            modifier = if (activeFilters.isNotEmpty()) Modifier else Modifier.size(0.dp)\r\n                        ) {\r\n                            Text(\"${activeFilters.size}\")\r\n                        }\r\n                        Icon(\r\n                            Icons.Default.FilterList,\r\n                            contentDescription = \"필터\",\r\n                            tint = if (showFilters) MaterialTheme.colorScheme.primary \r\n                                  else MaterialTheme.colorScheme.onSurface\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    ) { paddingValues ->\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(paddingValues)\r\n        ) {\r\n            // \uD83D\uDD0D 검색 입력 영역\r\n            SearchInputSection(\r\n                searchQuery = searchQuery,\r\n                onQueryChange = viewModel::onSearchQueryChanged,\r\n                suggestions = searchSuggestions,\r\n                onSuggestionClick = viewModel::selectSuggestion,\r\n                onSearch = {\r\n                    viewModel.performSearch()\r\n                    keyboardController?.hide()\r\n                },\r\n                focusRequester = focusRequester\r\n            )\r\n            \r\n            // \uD83C\uDFAF 필터 영역 (접을 수 있음)\r\n            AnimatedVisibility(\r\n                visible = showFilters,\r\n                enter = slideInVertically() + expandVertically(),\r\n                exit = slideOutVertically() + shrinkVertically()\r\n            ) {\r\n                FilterSection(\r\n                    activeFilters = activeFilters,\r\n                    onFilterToggle = viewModel::toggleFilter,\r\n                    onClearFilters = viewModel::clearAllFilters\r\n                )\r\n            }\r\n            \r\n            // \uD83D\uDD25 인기 검색어 (검색어 없을 때만 표시)\r\n            if (searchQuery.isEmpty() && searchResults.isEmpty()) {\r\n                PopularKeywordsSection(\r\n                    keywords = popularKeywords,\r\n                    onKeywordClick = viewModel::selectSuggestion\r\n                )\r\n            }\r\n            \r\n            // \uD83D\uDCF1 검색 결과 영역\r\n            when {\r\n                isLoading -> {\r\n                    Box(\r\n                        modifier = Modifier.fillMaxSize(),\r\n                        contentAlignment = Alignment.Center\r\n                    ) {\r\n                        Column(\r\n                            horizontalAlignment = Alignment.CenterHorizontally\r\n                        ) {\r\n                            CircularProgressIndicator(\r\n                                color = MaterialTheme.colorScheme.primary\r\n                            )\r\n                            \r\n                            Spacer(modifier = Modifier.height(16.dp))\r\n                            \r\n                            Text(\r\n                                text = \"\uD83D\uDD0D 검색 중...\",\r\n                                fontSize = 16.sp,\r\n                                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                searchResults.isEmpty() && searchQuery.isNotEmpty() -> {\r\n                    SearchEmptyState(searchQuery)\r\n                }\r\n                \r\n                else -> {\r\n                    SearchResultsList(\r\n                        results = searchResults,\r\n                        onDealClick = onDealClick,\r\n                        query = searchQuery\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SearchInputSection(\r\n    searchQuery: String,\r\n    onQueryChange: (String) -> Unit,\r\n    suggestions: List<String>,\r\n    onSuggestionClick: (String) -> Unit,\r\n    onSearch: () -> Unit,\r\n    focusRequester: FocusRequester\r\n) {\r\n    Column(\r\n        modifier = Modifier.padding(16.dp)\r\n    ) {\r\n        OutlinedTextField(\r\n            value = searchQuery,\r\n            onValueChange = onQueryChange,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(focusRequester),\r\n            placeholder = {\r\n                Text(\r\n                    text = \"\uD83D\uDD0D 상품명, 브랜드, 카테고리 검색...\",\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            },\r\n            leadingIcon = {\r\n                Icon(\r\n                    Icons.Default.Search,\r\n                    contentDescription = \"검색\",\r\n                    tint = MaterialTheme.colorScheme.primary\r\n                )\r\n            },\r\n            trailingIcon = {\r\n                if (searchQuery.isNotEmpty()) {\r\n                    IconButton(onClick = { onQueryChange(\"\") }) {\r\n                        Icon(\r\n                            Icons.Default.Clear,\r\n                            contentDescription = \"지우기\"\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            keyboardOptions = KeyboardOptions(\r\n                imeAction = ImeAction.Search\r\n            ),\r\n            keyboardActions = KeyboardActions(\r\n                onSearch = { onSearch() }\r\n            ),\r\n            singleLine = true,\r\n            shape = RoundedCornerShape(12.dp)\r\n        )\r\n        \r\n        // \uD83D\uDCA1 검색 자동완성 (드롭다운)\r\n        AnimatedVisibility(\r\n            visible = suggestions.isNotEmpty() && searchQuery.isNotEmpty(),\r\n            enter = fadeIn() + expandVertically(),\r\n            exit = fadeOut() + shrinkVertically()\r\n        ) {\r\n            Card(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(top = 4.dp),\r\n                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)\r\n            ) {\r\n                LazyColumn(\r\n                    modifier = Modifier.heightIn(max = 200.dp)\r\n                ) {\r\n                    items(suggestions.take(5)) { suggestion ->\r\n                        SuggestionItem(\r\n                            suggestion = suggestion,\r\n                            query = searchQuery,\r\n                            onClick = { onSuggestionClick(suggestion) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SuggestionItem(\r\n    suggestion: String,\r\n    query: String,\r\n    onClick: () -> Unit\r\n) {\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable { onClick() }\r\n            .padding(horizontal = 16.dp, vertical = 12.dp),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Icon(\r\n            Icons.Default.Search,\r\n            contentDescription = null,\r\n            modifier = Modifier.size(18.dp),\r\n            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        \r\n        Spacer(modifier = Modifier.width(12.dp))\r\n        \r\n        // 검색어 하이라이팅\r\n        Text(\r\n            text = suggestion,\r\n            fontSize = 14.sp,\r\n            modifier = Modifier.weight(1f)\r\n        )\r\n        \r\n        Icon(\r\n            Icons.Default.NorthWest,\r\n            contentDescription = null,\r\n            modifier = Modifier.size(16.dp),\r\n            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FilterSection(\r\n    activeFilters: Map<String, Set<String>>,\r\n    onFilterToggle: (String, String) -> Unit,\r\n    onClearFilters: () -> Unit\r\n) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 16.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(16.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = \"\uD83C\uDFAF 상세 필터\",\r\n                    fontSize = 16.sp,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n                \r\n                if (activeFilters.values.any { it.isNotEmpty() }) {\r\n                    TextButton(onClick = onClearFilters) {\r\n                        Text(\"전체 해제\")\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Spacer(modifier = Modifier.height(12.dp))\r\n            \r\n            // 가격대 필터\r\n            FilterGroup(\r\n                title = \"\uD83D\uDCB0 가격대\",\r\n                options = listOf(\"5만원 이하\", \"5-15만원\", \"15-50만원\", \"50-100만원\", \"100만원 이상\"),\r\n                selectedOptions = activeFilters[\"price\"] ?: emptySet(),\r\n                onToggle = { option -> onFilterToggle(\"price\", option) }\r\n            )\r\n            \r\n            Spacer(modifier = Modifier.height(16.dp))\r\n            \r\n            // 할인율 필터  \r\n            FilterGroup(\r\n                title = \"\uD83D\uDD25 할인율\",\r\n                options = listOf(\"30% 이상\", \"50% 이상\", \"70% 이상\"),\r\n                selectedOptions = activeFilters[\"discount\"] ?: emptySet(),\r\n                onToggle = { option -> onFilterToggle(\"discount\", option) }\r\n            )\r\n            \r\n            Spacer(modifier = Modifier.height(16.dp))\r\n            \r\n            // 카테고리 필터\r\n            FilterGroup(\r\n                title = \"\uD83D\uDCF1 카테고리\",\r\n                options = listOf(\"IT\", \"패션\", \"생활\", \"식품\", \"해외직구\", \"스포츠\"),\r\n                selectedOptions = activeFilters[\"category\"] ?: emptySet(),\r\n                onToggle = { option -> onFilterToggle(\"category\", option) }\r\n            )\r\n            \r\n            Spacer(modifier = Modifier.height(16.dp))\r\n            \r\n            // 사이트 필터 (우선순위 반영)\r\n            FilterGroup(\r\n                title = \"\uD83C\uDF10 커뮤니티\",\r\n                options = listOf(\"뽐뿌\", \"에펨코리아\", \"빠삭\", \"루리웹\", \"클리앙\", \"퀘이사존\"),\r\n                selectedOptions = activeFilters[\"site\"] ?: emptySet(),\r\n                onToggle = { option -> onFilterToggle(\"site\", option) }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FilterGroup(\r\n    title: String,\r\n    options: List<String>,\r\n    selectedOptions: Set<String>,\r\n    onToggle: (String) -> Unit\r\n) {\r\n    Column {\r\n        Text(\r\n            text = title,\r\n            fontSize = 14.sp,\r\n            fontWeight = FontWeight.Medium,\r\n            modifier = Modifier.padding(bottom = 8.dp)\r\n        )\r\n        \r\n        LazyRow(\r\n            horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            items(options) { option ->\r\n                FilterChip(\r\n                    onClick = { onToggle(option) },\r\n                    label = { Text(option) },\r\n                    selected = option in selectedOptions,\r\n                    colors = FilterChipDefaults.filterChipColors(\r\n                        selectedContainerColor = MaterialTheme.colorScheme.primary,\r\n                        selectedLabelColor = MaterialTheme.colorScheme.onPrimary\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PopularKeywordsSection(\r\n    keywords: List<String>,\r\n    onKeywordClick: (String) -> Unit\r\n) {\r\n    Column(\r\n        modifier = Modifier.padding(16.dp)\r\n    ) {\r\n        Row(\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            modifier = Modifier.padding(bottom = 12.dp)\r\n        ) {\r\n            Icon(\r\n                Icons.Default.TrendingUp,\r\n                contentDescription = null,\r\n                modifier = Modifier.size(20.dp),\r\n                tint = MaterialTheme.colorScheme.primary\r\n            )\r\n            \r\n            Spacer(modifier = Modifier.width(8.dp))\r\n            \r\n            Text(\r\n                text = \"\uD83D\uDD25 실시간 인기 검색어\",\r\n                fontSize = 16.sp,\r\n                fontWeight = FontWeight.Bold\r\n            )\r\n        }\r\n        \r\n        LazyRow(\r\n            horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            items(keywords.take(10)) { keyword ->\r\n                AssistChip(\r\n                    onClick = { onKeywordClick(keyword) },\r\n                    label = { Text(keyword) },\r\n                    leadingIcon = {\r\n                        Icon(\r\n                            Icons.Default.Search,\r\n                            contentDescription = null,\r\n                            modifier = Modifier.size(16.dp)\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SearchResultsList(\r\n    results: List<DealItem>,\r\n    onDealClick: (DealItem) -> Unit,\r\n    query: String\r\n) {\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        verticalArrangement = Arrangement.spacedBy(8.dp),\r\n        contentPadding = PaddingValues(16.dp)\r\n    ) {\r\n        item {\r\n            // 검색 결과 통계\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = \"\uD83D\uDD0D 검색 결과 ${results.size}개\",\r\n                    fontSize = 16.sp,\r\n                    fontWeight = FontWeight.Medium\r\n                )\r\n                \r\n                // 정렬 옵션\r\n                var showSortMenu by remember { mutableStateOf(false) }\r\n                \r\n                TextButton(\r\n                    onClick = { showSortMenu = true }\r\n                ) {\r\n                    Text(\"정렬\")\r\n                    Icon(\r\n                        Icons.Default.ArrowDropDown,\r\n                        contentDescription = null,\r\n                        modifier = Modifier.size(16.dp)\r\n                    )\r\n                }\r\n                \r\n                DropdownMenu(\r\n                    expanded = showSortMenu,\r\n                    onDismissRequest = { showSortMenu = false }\r\n                ) {\r\n                    DropdownMenuItem(\r\n                        text = { Text(\"최신순\") },\r\n                        onClick = { \r\n                            // viewModel.setSortOrder(SortOrder.LATEST)\r\n                            showSortMenu = false \r\n                        }\r\n                    )\r\n                    DropdownMenuItem(\r\n                        text = { Text(\"인기순\") },\r\n                        onClick = { \r\n                            // viewModel.setSortOrder(SortOrder.POPULAR)\r\n                            showSortMenu = false \r\n                        }\r\n                    )\r\n                    DropdownMenuItem(\r\n                        text = { Text(\"할인율순\") },\r\n                        onClick = { \r\n                            // viewModel.setSortOrder(SortOrder.DISCOUNT)\r\n                            showSortMenu = false \r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        \r\n        items(results) { deal ->\r\n            SearchResultItem(\r\n                deal = deal,\r\n                onClick = { onDealClick(deal) },\r\n                query = query\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SearchResultItem(\r\n    deal: DealItem,\r\n    onClick: () -> Unit,\r\n    query: String\r\n) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable { onClick() },\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            // 상품 이미지\r\n            AsyncImage(\r\n                model = deal.imageUrl,\r\n                contentDescription = deal.title,\r\n                modifier = Modifier\r\n                    .size(60.dp)\r\n                    .clip(RoundedCornerShape(8.dp))\r\n                    .background(MaterialTheme.colorScheme.surfaceVariant)\r\n            )\r\n            \r\n            Spacer(modifier = Modifier.width(12.dp))\r\n            \r\n            // 상품 정보\r\n            Column(\r\n                modifier = Modifier.weight(1f)\r\n            ) {\r\n                // 사이트명 + 꿀딜 지수\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    horizontalArrangement = Arrangement.SpaceBetween,\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    Text(\r\n                        text = \"[${deal.siteName}]\",\r\n                        fontSize = 12.sp,\r\n                        color = MaterialTheme.colorScheme.primary,\r\n                        fontWeight = FontWeight.Medium\r\n                    )\r\n                    \r\n                    InlineScoreBadge(score = 85) // 실제로는 deal.qualityScore\r\n                }\r\n                \r\n                Spacer(modifier = Modifier.height(4.dp))\r\n                \r\n                // 상품명 (키워드 하이라이팅)\r\n                Text(\r\n                    text = deal.title,\r\n                    fontSize = 14.sp,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 2\r\n                )\r\n                \r\n                Spacer(modifier = Modifier.height(4.dp))\r\n                \r\n                // 가격 정보\r\n                Text(\r\n                    text = \"${NumberFormat.getInstance().format(deal.price)}원\",\r\n                    fontSize = 16.sp,\r\n                    fontWeight = FontWeight.Bold,\r\n                    color = MaterialTheme.colorScheme.primary\r\n                )\r\n                \r\n                // 할인율 (있는 경우)\r\n                deal.discountRate?.let { discount ->\r\n                    Text(\r\n                        text = \"${discount}% 할인\",\r\n                        fontSize = 12.sp,\r\n                        color = Color.Red,\r\n                        fontWeight = FontWeight.Medium\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun InlineScoreBadge(score: Int) {\r\n    Surface(\r\n        modifier = Modifier,\r\n        shape = RoundedCornerShape(12.dp),\r\n        color = when {\r\n            score >= 90 -> Color(0xFFFF6B6B)\r\n            score >= 70 -> Color(0xFFFFB347)\r\n            else -> Color(0xFF95A5A6)\r\n        }\r\n    ) {\r\n        Text(\r\n            text = \"\uD83D\uDD25 $score\",\r\n            color = Color.White,\r\n            fontSize = 10.sp,\r\n            fontWeight = FontWeight.Bold,\r\n            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SearchEmptyState(query: String) {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(32.dp),\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Icon(\r\n            Icons.Default.SearchOff,\r\n            contentDescription = null,\r\n            modifier = Modifier.size(64.dp),\r\n            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        \r\n        Spacer(modifier = Modifier.height(16.dp))\r\n        \r\n        Text(\r\n            text = \"검색 결과가 없습니다\",\r\n            fontSize = 18.sp,\r\n            fontWeight = FontWeight.Medium,\r\n            textAlign = TextAlign.Center\r\n        )\r\n        \r\n        Text(\r\n            text = \"\\\"$query\\\"에 대한 핫딜을 찾을 수 없어요\",\r\n            fontSize = 14.sp,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n            textAlign = TextAlign.Center,\r\n            modifier = Modifier.padding(top = 8.dp)\r\n        )\r\n        \r\n        Spacer(modifier = Modifier.height(24.dp))\r\n        \r\n        Text(\r\n            text = \"\uD83D\uDCA1 검색 팁:\\n• 더 간단한 키워드로 검색해보세요\\n• 브랜드명이나 카테고리로 검색해보세요\\n• 필터를 조정해보세요\",\r\n            fontSize = 14.sp,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n            textAlign = TextAlign.Center,\r\n            lineHeight = 20.sp\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/ddaeany0919/insightdeal/AdvancedSearchScreen.kt b/app/src/main/java/com/ddaeany0919/insightdeal/AdvancedSearchScreen.kt
--- a/app/src/main/java/com/ddaeany0919/insightdeal/AdvancedSearchScreen.kt	(revision 06774c5d93972d5d930684fe83fe4009ea741442)
+++ b/app/src/main/java/com/ddaeany0919/insightdeal/AdvancedSearchScreen.kt	(date 1761318227225)
@@ -44,16 +44,16 @@
     val activeFilters by viewModel.activeFilters.collectAsState()
     val popularKeywords by viewModel.popularKeywords.collectAsState()
     val isLoading by viewModel.isLoading.collectAsState()
-    
+
     var showFilters by remember { mutableStateOf(false) }
     val focusRequester = remember { FocusRequester() }
     val keyboardController = LocalSoftwareKeyboardController.current
-    
+
     LaunchedEffect(Unit) {
         viewModel.loadPopularKeywords()
         focusRequester.requestFocus()
     }
-    
+
     Scaffold(
         topBar = {
             TopAppBar(
@@ -80,8 +80,8 @@
                         Icon(
                             Icons.Default.FilterList,
                             contentDescription = "필터",
-                            tint = if (showFilters) MaterialTheme.colorScheme.primary 
-                                  else MaterialTheme.colorScheme.onSurface
+                            tint = if (showFilters) MaterialTheme.colorScheme.primary
+                            else MaterialTheme.colorScheme.onSurface
                         )
                     }
                 }
@@ -105,7 +105,7 @@
                 },
                 focusRequester = focusRequester
             )
-            
+
             // 🎯 필터 영역 (접을 수 있음)
             AnimatedVisibility(
                 visible = showFilters,
@@ -118,7 +118,7 @@
                     onClearFilters = viewModel::clearAllFilters
                 )
             }
-            
+
             // 🔥 인기 검색어 (검색어 없을 때만 표시)
             if (searchQuery.isEmpty() && searchResults.isEmpty()) {
                 PopularKeywordsSection(
@@ -126,7 +126,7 @@
                     onKeywordClick = viewModel::selectSuggestion
                 )
             }
-            
+
             // 📱 검색 결과 영역
             when {
                 isLoading -> {
@@ -140,9 +140,9 @@
                             CircularProgressIndicator(
                                 color = MaterialTheme.colorScheme.primary
                             )
-                            
+
                             Spacer(modifier = Modifier.height(16.dp))
-                            
+
                             Text(
                                 text = "🔍 검색 중...",
                                 fontSize = 16.sp,
@@ -151,11 +151,11 @@
                         }
                     }
                 }
-                
+
                 searchResults.isEmpty() && searchQuery.isNotEmpty() -> {
                     SearchEmptyState(searchQuery)
                 }
-                
+
                 else -> {
                     SearchResultsList(
                         results = searchResults,
@@ -218,7 +218,7 @@
             singleLine = true,
             shape = RoundedCornerShape(12.dp)
         )
-        
+
         // 💡 검색 자동완성 (드롭다운)
         AnimatedVisibility(
             visible = suggestions.isNotEmpty() && searchQuery.isNotEmpty(),
@@ -266,16 +266,16 @@
             modifier = Modifier.size(18.dp),
             tint = MaterialTheme.colorScheme.onSurfaceVariant
         )
-        
+
         Spacer(modifier = Modifier.width(12.dp))
-        
+
         // 검색어 하이라이팅
         Text(
             text = suggestion,
             fontSize = 14.sp,
             modifier = Modifier.weight(1f)
         )
-        
+
         Icon(
             Icons.Default.NorthWest,
             contentDescription = null,
@@ -310,16 +310,16 @@
                     fontSize = 16.sp,
                     fontWeight = FontWeight.Bold
                 )
-                
+
                 if (activeFilters.values.any { it.isNotEmpty() }) {
                     TextButton(onClick = onClearFilters) {
                         Text("전체 해제")
                     }
                 }
             }
-            
+
             Spacer(modifier = Modifier.height(12.dp))
-            
+
             // 가격대 필터
             FilterGroup(
                 title = "💰 가격대",
@@ -327,9 +327,9 @@
                 selectedOptions = activeFilters["price"] ?: emptySet(),
                 onToggle = { option -> onFilterToggle("price", option) }
             )
-            
+
             Spacer(modifier = Modifier.height(16.dp))
-            
+
             // 할인율 필터  
             FilterGroup(
                 title = "🔥 할인율",
@@ -337,9 +337,9 @@
                 selectedOptions = activeFilters["discount"] ?: emptySet(),
                 onToggle = { option -> onFilterToggle("discount", option) }
             )
-            
+
             Spacer(modifier = Modifier.height(16.dp))
-            
+
             // 카테고리 필터
             FilterGroup(
                 title = "📱 카테고리",
@@ -347,9 +347,9 @@
                 selectedOptions = activeFilters["category"] ?: emptySet(),
                 onToggle = { option -> onFilterToggle("category", option) }
             )
-            
+
             Spacer(modifier = Modifier.height(16.dp))
-            
+
             // 사이트 필터 (우선순위 반영)
             FilterGroup(
                 title = "🌐 커뮤니티",
@@ -375,7 +375,7 @@
             fontWeight = FontWeight.Medium,
             modifier = Modifier.padding(bottom = 8.dp)
         )
-        
+
         LazyRow(
             horizontalArrangement = Arrangement.spacedBy(8.dp)
         ) {
@@ -412,16 +412,16 @@
                 modifier = Modifier.size(20.dp),
                 tint = MaterialTheme.colorScheme.primary
             )
-            
+
             Spacer(modifier = Modifier.width(8.dp))
-            
+
             Text(
                 text = "🔥 실시간 인기 검색어",
                 fontSize = 16.sp,
                 fontWeight = FontWeight.Bold
             )
         }
-        
+
         LazyRow(
             horizontalArrangement = Arrangement.spacedBy(8.dp)
         ) {
@@ -465,10 +465,10 @@
                     fontSize = 16.sp,
                     fontWeight = FontWeight.Medium
                 )
-                
+
                 // 정렬 옵션
                 var showSortMenu by remember { mutableStateOf(false) }
-                
+
                 TextButton(
                     onClick = { showSortMenu = true }
                 ) {
@@ -479,36 +479,36 @@
                         modifier = Modifier.size(16.dp)
                     )
                 }
-                
+
                 DropdownMenu(
                     expanded = showSortMenu,
                     onDismissRequest = { showSortMenu = false }
                 ) {
                     DropdownMenuItem(
                         text = { Text("최신순") },
-                        onClick = { 
+                        onClick = {
                             // viewModel.setSortOrder(SortOrder.LATEST)
-                            showSortMenu = false 
+                            showSortMenu = false
                         }
                     )
                     DropdownMenuItem(
                         text = { Text("인기순") },
-                        onClick = { 
+                        onClick = {
                             // viewModel.setSortOrder(SortOrder.POPULAR)
-                            showSortMenu = false 
+                            showSortMenu = false
                         }
                     )
                     DropdownMenuItem(
                         text = { Text("할인율순") },
-                        onClick = { 
+                        onClick = {
                             // viewModel.setSortOrder(SortOrder.DISCOUNT)
-                            showSortMenu = false 
+                            showSortMenu = false
                         }
                     )
                 }
             }
         }
-        
+
         items(results) { deal ->
             SearchResultItem(
                 deal = deal,
@@ -546,9 +546,9 @@
                     .clip(RoundedCornerShape(8.dp))
                     .background(MaterialTheme.colorScheme.surfaceVariant)
             )
-            
+
             Spacer(modifier = Modifier.width(12.dp))
-            
+
             // 상품 정보
             Column(
                 modifier = Modifier.weight(1f)
@@ -565,12 +565,12 @@
                         color = MaterialTheme.colorScheme.primary,
                         fontWeight = FontWeight.Medium
                     )
-                    
+
                     InlineScoreBadge(score = 85) // 실제로는 deal.qualityScore
                 }
-                
+
                 Spacer(modifier = Modifier.height(4.dp))
-                
+
                 // 상품명 (키워드 하이라이팅)
                 Text(
                     text = deal.title,
@@ -578,9 +578,9 @@
                     fontWeight = FontWeight.Medium,
                     maxLines = 2
                 )
-                
+
                 Spacer(modifier = Modifier.height(4.dp))
-                
+
                 // 가격 정보
                 Text(
                     text = "${NumberFormat.getInstance().format(deal.price)}원",
@@ -588,7 +588,7 @@
                     fontWeight = FontWeight.Bold,
                     color = MaterialTheme.colorScheme.primary
                 )
-                
+
                 // 할인율 (있는 경우)
                 deal.discountRate?.let { discount ->
                     Text(
@@ -631,7 +631,7 @@
             .fillMaxSize()
             .padding(32.dp),
         horizontalAlignment = Alignment.CenterHorizontally,
-        verticalAlignment = Alignment.CenterVertically
+        verticalArrangement = Arrangement.Center
     ) {
         Icon(
             Icons.Default.SearchOff,
@@ -639,16 +639,16 @@
             modifier = Modifier.size(64.dp),
             tint = MaterialTheme.colorScheme.onSurfaceVariant
         )
-        
+
         Spacer(modifier = Modifier.height(16.dp))
-        
+
         Text(
             text = "검색 결과가 없습니다",
             fontSize = 18.sp,
             fontWeight = FontWeight.Medium,
             textAlign = TextAlign.Center
         )
-        
+
         Text(
             text = "\"$query\"에 대한 핫딜을 찾을 수 없어요",
             fontSize = 14.sp,
@@ -656,9 +656,9 @@
             textAlign = TextAlign.Center,
             modifier = Modifier.padding(top = 8.dp)
         )
-        
+
         Spacer(modifier = Modifier.height(24.dp))
-        
+
         Text(
             text = "💡 검색 팁:\n• 더 간단한 키워드로 검색해보세요\n• 브랜드명이나 카테고리로 검색해보세요\n• 필터를 조정해보세요",
             fontSize = 14.sp,
