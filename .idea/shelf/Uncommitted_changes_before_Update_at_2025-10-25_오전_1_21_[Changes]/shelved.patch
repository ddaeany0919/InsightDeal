Index: app/src/main/java/com/ddaeany0919/insightdeal/PriceGraphScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ddaeany0919.insightdeal\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.Share\r\nimport androidx.compose.material.icons.filled.TrendingDown\r\nimport androidx.compose.material.icons.filled.TrendingUp\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.viewinterop.AndroidView\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport coil.compose.AsyncImage\r\nimport com.github.mikephil.charting.charts.LineChart\r\nimport com.github.mikephil.charting.components.XAxis\r\nimport com.github.mikephil.charting.data.Entry\r\nimport com.github.mikephil.charting.data.LineData\r\nimport com.github.mikephil.charting.data.LineDataSet\r\nimport com.github.mikephil.charting.formatter.IndexAxisValueFormatter\r\nimport java.text.NumberFormat\r\nimport java.util.*\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun PriceGraphScreen(\r\n    productId: Int,\r\n    onBackClick: () -> Unit,\r\n    viewModel: PriceChartViewModel = viewModel()\r\n) {\r\n    val product by viewModel.product.collectAsState()\r\n    val priceHistory by viewModel.priceHistory.collectAsState()\r\n    val isLoading by viewModel.isLoading.collectAsState()\r\n    val errorMessage by viewModel.errorMessage.collectAsState()\r\n\r\n    var selectedPeriod by remember { mutableStateOf(\"전체\") }\r\n    val periods = listOf(\"7일\", \"30일\", \"전체\")\r\n\r\n    LaunchedEffect(productId) {\r\n        viewModel.loadProductData(productId)\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            TopAppBar(\r\n                title = {\r\n                    Text(\r\n                        text = \"가격 추이\",\r\n                        fontWeight = FontWeight.Bold,\r\n                        fontSize = 20.sp\r\n                    )\r\n                },\r\n                navigationIcon = {\r\n                    IconButton(onClick = onBackClick) {\r\n                        Icon(Icons.Default.ArrowBack, contentDescription = \"뒤로가기\")\r\n                    }\r\n                },\r\n                actions = {\r\n                    IconButton(onClick = { /* 공유 기능 */ }) {\r\n                        Icon(Icons.Default.Share, contentDescription = \"공유\")\r\n                    }\r\n                },\r\n                colors = TopAppBarDefaults.topAppBarColors(\r\n                    containerColor = MaterialTheme.colorScheme.surface\r\n                )\r\n            )\r\n        }\r\n    ) { paddingValues ->\r\n        if (isLoading) {\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(paddingValues),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator(\r\n                    color = MaterialTheme.colorScheme.primary\r\n                )\r\n            }\r\n        } else {\r\n            LazyColumn(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(paddingValues),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp)\r\n            ) {\r\n                // \uD83D\uDCCA 상품 정보 카드\r\n                item {\r\n                    product?.let { ProductInfoCard(it) }\r\n                }\r\n\r\n                // \uD83D\uDCC8 기간 선택 버튼\r\n                item {\r\n                    PeriodSelector(\r\n                        periods = periods,\r\n                        selectedPeriod = selectedPeriod,\r\n                        onPeriodSelected = { selectedPeriod = it }\r\n                    )\r\n                }\r\n\r\n                // \uD83D\uDCCA 가격 그래프\r\n                item {\r\n                    if (priceHistory.isNotEmpty()) {\r\n                        PriceChart(\r\n                            priceHistory = viewModel.getFilteredHistory(\r\n                                when (selectedPeriod) {\r\n                                    \"7일\" -> 7\r\n                                    \"30일\" -> 30\r\n                                    else -> -1\r\n                                }\r\n                            ),\r\n                            targetPrice = product?.targetPrice ?: 0\r\n                        )\r\n                    }\r\n                }\r\n\r\n                // \uD83D\uDCC8 가격 통계\r\n                item {\r\n                    PriceStatisticsCard(\r\n                        statistics = viewModel.getPriceStatistics()\r\n                    )\r\n                }\r\n\r\n                // \uD83C\uDFAF 구매 타이밍 조언\r\n                item {\r\n                    BuyingAdviceCard(\r\n                        advice = viewModel.getBuyingTimingAdvice()\r\n                    )\r\n                }\r\n\r\n                // \uD83D\uDCCB 가격 히스토리 리스트\r\n                items(priceHistory.take(10)) { historyItem ->\r\n                    PriceHistoryItem(historyItem)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 에러 메시지 처리\r\n    errorMessage?.let { message ->\r\n        LaunchedEffect(message) {\r\n            // 스낵바나 토스트로 에러 표시\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProductInfoCard(product: ProductData) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 16.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),\r\n        shape = RoundedCornerShape(16.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(16.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            // 상품 이미지\r\n            AsyncImage(\r\n                model = product.imageUrl,\r\n                contentDescription = product.title,\r\n                modifier = Modifier\r\n                    .size(80.dp)\r\n                    .clip(RoundedCornerShape(8.dp))\r\n                    .background(MaterialTheme.colorScheme.surfaceVariant)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.width(12.dp))\r\n\r\n            // 상품 정보\r\n            Column(\r\n                modifier = Modifier.weight(1f)\r\n            ) {\r\n                Text(\r\n                    text = product.brand,\r\n                    fontSize = 12.sp,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n                \r\n                Text(\r\n                    text = product.title,\r\n                    fontSize = 14.sp,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 2,\r\n                    modifier = Modifier.padding(top = 4.dp)\r\n                )\r\n\r\n                Spacer(modifier = Modifier.height(8.dp))\r\n\r\n                // 현재 가격\r\n                Text(\r\n                    text = \"${NumberFormat.getInstance().format(product.currentPrice)}원\",\r\n                    fontSize = 18.sp,\r\n                    fontWeight = FontWeight.Bold,\r\n                    color = MaterialTheme.colorScheme.primary\r\n                )\r\n\r\n                // 가격 변동\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    modifier = Modifier.padding(top = 4.dp)\r\n                ) {\r\n                    val isIncrease = product.priceChangePercent > 0\r\n                    Icon(\r\n                        imageVector = if (isIncrease) Icons.Default.TrendingUp else Icons.Default.TrendingDown,\r\n                        contentDescription = null,\r\n                        size = 16.dp,\r\n                        tint = if (isIncrease) Color.Red else Color.Blue\r\n                    )\r\n                    \r\n                    Text(\r\n                        text = \"${if (isIncrease) \"+\" else \"\"}${product.priceChangePercent}%\",\r\n                        fontSize = 12.sp,\r\n                        color = if (isIncrease) Color.Red else Color.Blue,\r\n                        modifier = Modifier.padding(start = 4.dp)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PeriodSelector(\r\n    periods: List<String>,\r\n    selectedPeriod: String,\r\n    onPeriodSelected: (String) -> Unit\r\n) {\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 16.dp),\r\n        horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n    ) {\r\n        periods.forEach { period ->\r\n            val isSelected = period == selectedPeriod\r\n            \r\n            FilterChip(\r\n                onClick = { onPeriodSelected(period) },\r\n                label = { Text(period) },\r\n                selected = isSelected,\r\n                colors = FilterChipDefaults.filterChipColors(\r\n                    selectedContainerColor = MaterialTheme.colorScheme.primary,\r\n                    selectedLabelColor = MaterialTheme.colorScheme.onPrimary\r\n                )\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PriceChart(\r\n    priceHistory: List<PriceHistoryData>,\r\n    targetPrice: Int\r\n) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(300.dp)\r\n            .padding(horizontal = 16.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(16.dp)\r\n        ) {\r\n            Text(\r\n                text = \"가격 추이 그래프\",\r\n                fontSize = 16.sp,\r\n                fontWeight = FontWeight.Bold,\r\n                modifier = Modifier.padding(bottom = 12.dp)\r\n            )\r\n\r\n            AndroidView(\r\n                factory = { context ->\r\n                    LineChart(context).apply {\r\n                        description.isEnabled = false\r\n                        setTouchEnabled(true)\r\n                        isDragEnabled = true\r\n                        setScaleEnabled(true)\r\n                        setPinchZoom(true)\r\n\r\n                        // X축 설정\r\n                        xAxis.apply {\r\n                            position = XAxis.XAxisPosition.BOTTOM\r\n                            setDrawGridLines(false)\r\n                            granularity = 1f\r\n                        }\r\n\r\n                        // 왼쪽 Y축 설정\r\n                        axisLeft.apply {\r\n                            setDrawGridLines(true)\r\n                            isEnabled = true\r\n                        }\r\n\r\n                        // 오른쪽 Y축 비활성화\r\n                        axisRight.isEnabled = false\r\n\r\n                        // 범례 비활성화\r\n                        legend.isEnabled = false\r\n                    }\r\n                },\r\n                update = { chart ->\r\n                    if (priceHistory.isNotEmpty()) {\r\n                        val entries = priceHistory.mapIndexed { index, item ->\r\n                            Entry(index.toFloat(), item.price.toFloat())\r\n                        }\r\n\r\n                        val dataSet = LineDataSet(entries, \"가격\").apply {\r\n                            color = android.graphics.Color.parseColor(\"#FF6B35\")\r\n                            lineWidth = 2f\r\n                            setDrawCircles(true)\r\n                            setCircleColor(android.graphics.Color.parseColor(\"#FF6B35\"))\r\n                            circleRadius = 4f\r\n                            setDrawValues(false)\r\n                            mode = LineDataSet.Mode.CUBIC_BEZIER\r\n                            setDrawFilled(true)\r\n                            fillColor = android.graphics.Color.parseColor(\"#33FF6B35\")\r\n                        }\r\n\r\n                        chart.data = LineData(dataSet)\r\n                        chart.invalidate()\r\n                    }\r\n                },\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(top = 8.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PriceStatisticsCard(statistics: PriceStatistics) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 16.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(16.dp)\r\n        ) {\r\n            Text(\r\n                text = \"가격 통계\",\r\n                fontSize = 16.sp,\r\n                fontWeight = FontWeight.Bold,\r\n                modifier = Modifier.padding(bottom = 12.dp)\r\n            )\r\n\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween\r\n            ) {\r\n                StatisticItem(\"현재\", \"${NumberFormat.getInstance().format(statistics.current)}원\")\r\n                StatisticItem(\"최저\", \"${NumberFormat.getInstance().format(statistics.lowest)}원\")\r\n                StatisticItem(\"최고\", \"${NumberFormat.getInstance().format(statistics.highest)}원\")\r\n                StatisticItem(\"평균\", \"${NumberFormat.getInstance().format(statistics.average)}원\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StatisticItem(label: String, value: String) {\r\n    Column(\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Text(\r\n            text = label,\r\n            fontSize = 12.sp,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Text(\r\n            text = value,\r\n            fontSize = 14.sp,\r\n            fontWeight = FontWeight.Medium,\r\n            modifier = Modifier.padding(top = 4.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun BuyingAdviceCard(advice: String) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 16.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),\r\n        colors = CardDefaults.cardColors(\r\n            containerColor = MaterialTheme.colorScheme.primaryContainer\r\n        )\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(16.dp)\r\n        ) {\r\n            Text(\r\n                text = \"\uD83C\uDFAF 구매 타이밍 조언\",\r\n                fontSize = 16.sp,\r\n                fontWeight = FontWeight.Bold,\r\n                color = MaterialTheme.colorScheme.onPrimaryContainer,\r\n                modifier = Modifier.padding(bottom = 8.dp)\r\n            )\r\n            \r\n            Text(\r\n                text = advice,\r\n                fontSize = 14.sp,\r\n                color = MaterialTheme.colorScheme.onPrimaryContainer,\r\n                lineHeight = 20.sp\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PriceHistoryItem(historyItem: PriceHistoryData) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 16.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(16.dp),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = historyItem.date,\r\n                fontSize = 14.sp,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            \r\n            Text(\r\n                text = \"${NumberFormat.getInstance().format(historyItem.price)}원\",\r\n                fontSize = 14.sp,\r\n                fontWeight = FontWeight.Medium\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/ddaeany0919/insightdeal/PriceGraphScreen.kt b/app/src/main/java/com/ddaeany0919/insightdeal/PriceGraphScreen.kt
--- a/app/src/main/java/com/ddaeany0919/insightdeal/PriceGraphScreen.kt	(revision 2cf0e270a2478a7d265c57a7a8fdd56eb9832713)
+++ b/app/src/main/java/com/ddaeany0919/insightdeal/PriceGraphScreen.kt	(date 1761322566054)
@@ -27,9 +27,7 @@
 import com.github.mikephil.charting.data.Entry
 import com.github.mikephil.charting.data.LineData
 import com.github.mikephil.charting.data.LineDataSet
-import com.github.mikephil.charting.formatter.IndexAxisValueFormatter
 import java.text.NumberFormat
-import java.util.*
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
@@ -149,13 +147,13 @@
     // 에러 메시지 처리
     errorMessage?.let { message ->
         LaunchedEffect(message) {
-            // 스낵바나 토스트로 에러 표시
+            viewModel.clearError()
         }
     }
 }
 
 @Composable
-private fun ProductInfoCard(product: ProductData) {
+private fun ProductInfoCard(product: PriceChartViewModel.ProductData) {
     Card(
         modifier = Modifier
             .fillMaxWidth()
@@ -190,7 +188,7 @@
                     fontSize = 12.sp,
                     color = MaterialTheme.colorScheme.onSurfaceVariant
                 )
-                
+
                 Text(
                     text = product.title,
                     fontSize = 14.sp,
@@ -218,10 +216,10 @@
                     Icon(
                         imageVector = if (isIncrease) Icons.Default.TrendingUp else Icons.Default.TrendingDown,
                         contentDescription = null,
-                        size = 16.dp,
+                        modifier = Modifier.size(16.dp),
                         tint = if (isIncrease) Color.Red else Color.Blue
                     )
-                    
+
                     Text(
                         text = "${if (isIncrease) "+" else ""}${product.priceChangePercent}%",
                         fontSize = 12.sp,
@@ -248,7 +246,7 @@
     ) {
         periods.forEach { period ->
             val isSelected = period == selectedPeriod
-            
+
             FilterChip(
                 onClick = { onPeriodSelected(period) },
                 label = { Text(period) },
@@ -264,7 +262,7 @@
 
 @Composable
 private fun PriceChart(
-    priceHistory: List<PriceHistoryData>,
+    priceHistory: List<PriceChartViewModel.PriceHistoryData>,
     targetPrice: Int
 ) {
     Card(
@@ -344,7 +342,7 @@
 }
 
 @Composable
-private fun PriceStatisticsCard(statistics: PriceStatistics) {
+private fun PriceStatisticsCard(statistics: PriceChartViewModel.PriceStatistics) {
     Card(
         modifier = Modifier
             .fillMaxWidth()
@@ -370,6 +368,30 @@
                 StatisticItem("최고", "${NumberFormat.getInstance().format(statistics.highest)}원")
                 StatisticItem("평균", "${NumberFormat.getInstance().format(statistics.average)}원")
             }
+
+            Spacer(modifier = Modifier.height(12.dp))
+
+            // 변동성 표시
+            Row(
+                verticalAlignment = Alignment.CenterVertically,
+                modifier = Modifier.fillMaxWidth()
+            ) {
+                Text(
+                    text = "가격 변동성: ",
+                    fontSize = 14.sp,
+                    fontWeight = FontWeight.Medium
+                )
+                Text(
+                    text = "${String.format("%.1f", statistics.volatility)}%",
+                    fontSize = 14.sp,
+                    color = when {
+                        statistics.volatility > 20 -> Color.Red
+                        statistics.volatility > 10 -> MaterialTheme.colorScheme.tertiary
+                        else -> Color.Green
+                    },
+                    fontWeight = FontWeight.Bold
+                )
+            }
         }
     }
 }
@@ -384,6 +406,7 @@
             fontSize = 12.sp,
             color = MaterialTheme.colorScheme.onSurfaceVariant
         )
+
         Text(
             text = value,
             fontSize = 14.sp,
@@ -407,26 +430,34 @@
         Column(
             modifier = Modifier.padding(16.dp)
         ) {
-            Text(
-                text = "🎯 구매 타이밍 조언",
-                fontSize = 16.sp,
-                fontWeight = FontWeight.Bold,
-                color = MaterialTheme.colorScheme.onPrimaryContainer,
-                modifier = Modifier.padding(bottom = 8.dp)
-            )
-            
+            Row(
+                verticalAlignment = Alignment.CenterVertically,
+                modifier = Modifier.padding(bottom = 8.dp)
+            ) {
+                Text(
+                    text = "🎯",
+                    fontSize = 18.sp
+                )
+                Spacer(modifier = Modifier.width(8.dp))
+                Text(
+                    text = "구매 타이밍 조언",
+                    fontSize = 16.sp,
+                    fontWeight = FontWeight.Bold
+                )
+            }
+
             Text(
                 text = advice,
                 fontSize = 14.sp,
-                color = MaterialTheme.colorScheme.onPrimaryContainer,
-                lineHeight = 20.sp
+                lineHeight = 20.sp,
+                color = MaterialTheme.colorScheme.onPrimaryContainer
             )
         }
     }
 }
 
 @Composable
-private fun PriceHistoryItem(historyItem: PriceHistoryData) {
+private fun PriceHistoryItem(historyItem: PriceChartViewModel.PriceHistoryData) {
     Card(
         modifier = Modifier
             .fillMaxWidth()
@@ -436,16 +467,23 @@
         Row(
             modifier = Modifier
                 .fillMaxWidth()
-                .padding(16.dp),
+                .padding(12.dp),
             horizontalArrangement = Arrangement.SpaceBetween,
             verticalAlignment = Alignment.CenterVertically
         ) {
-            Text(
-                text = historyItem.date,
-                fontSize = 14.sp,
-                color = MaterialTheme.colorScheme.onSurfaceVariant
-            )
-            
+            Column {
+                Text(
+                    text = formatDate(historyItem.date),
+                    fontSize = 12.sp,
+                    color = MaterialTheme.colorScheme.onSurfaceVariant
+                )
+                Text(
+                    text = formatTime(historyItem.date),
+                    fontSize = 10.sp,
+                    color = MaterialTheme.colorScheme.onSurfaceVariant
+                )
+            }
+
             Text(
                 text = "${NumberFormat.getInstance().format(historyItem.price)}원",
                 fontSize = 14.sp,
@@ -453,4 +491,31 @@
             )
         }
     }
+}
+
+// 유틸리티 함수들
+private fun formatDate(dateString: String): String {
+    return try {
+        val parts = dateString.split("T")[0].split("-")
+        if (parts.size == 3) {
+            "${parts[1]}월 ${parts[2]}일"
+        } else {
+            dateString
+        }
+    } catch (e: Exception) {
+        dateString
+    }
+}
+
+private fun formatTime(dateString: String): String {
+    return try {
+        val timePart = dateString.split("T").getOrNull(1)?.split(":")
+        if (timePart != null && timePart.size >= 2) {
+            "${timePart[0]}:${timePart[1]}"
+        } else {
+            ""
+        }
+    } catch (e: Exception) {
+        ""
+    }
 }
\ No newline at end of file
